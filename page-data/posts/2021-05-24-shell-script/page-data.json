{"componentChunkName":"component---src-templates-post-js","path":"/posts/2021-05-24-shell-script/","result":{"data":{"site":{"siteMetadata":{"title":"MJUN Tech Note","author":"Junya Morioka"}},"markdownRemark":{"id":"e7f7374b-c7da-5108-96c1-d30689113de5","html":"<p>本稿ではshellscriptについて基本的なことを書く。</p>\n<h2 id=\"shell-scriptの1行目\">Shell Scriptの1行目</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\npythonは\n<span class=\"token comment\">#!/usr/bin/env python</span></code></pre></div>\n<p>この一行目はシバン(shebang) [[1][1]] という。<code class=\"language-text\">#![インタプリタのパス] [インタプリタの引数]</code>で指定する。</p>\n<h2 id=\"if文の書き方\">if文の書き方</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> <span class=\"token function\">file</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'fileが存在します'</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> <span class=\"token function\">file</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'fileが存在します'</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> <span class=\"token function\">file</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'ファイルが存在します'</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span></code></pre></div>\n<p>then, fiの前には終端記号のコロン(;)か改行が必要。</p>\n<h2 id=\"パイプ---リスト--\">パイプ( | ), リスト( ; )</h2>\n<p>パイプラインは複数のコマンドをパイプ(|)でつなげたもの。コマンドの標準出力を別のコマンドの標準出力に接続させる。\nリストは1つ以上のパイプラインを、改行・;・&#x26;・&#x26;&#x26;・||で区切って並べたもの。\n&#x26;の前はバックグラウンドで動作する。</p>\n<h2 id=\"-と-\">&#x26;&#x26; と ||</h2>\n<p>&#x26;&#x26;はAND処理、||はOR処理であるが、Shellscript(C言語)のシステム上、左から順にコマンドが実行される。<br>\n&#x26;&#x26;の場合は左のコマンドが偽であった場合は右のコマンドは実行されない。<br>\n||の場合は左のコマンドが真であった場合は右のコマンドが実行されない。<br>\nこの挙動を利用して、簡単な条件分岐が行える。\n&#x26;&#x26;では左のコマンドが真のときのみ右のコマンドを行う。||では左のコマンドが偽のときに右のコマンドを行う。\nといったように使用できる。</p>\n<h2 id=\"if文\">if文</h2>\n<p>基本形は以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'i=3'</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'i=4'</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'i!=3,4'</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>testコマンド（上記だと[ ]で書かれている）を用いない場合は以下の通り</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token function\">cmp</span> <span class=\"token parameter variable\">-s</span> file1 file2<span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token comment\"># -sオプションでメッセージなし</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'file1==file2'</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'file1!=file2'</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\">#または</span>\n\n<span class=\"token function\">cmp</span> <span class=\"token parameter variable\">-s</span> file1 file2\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'file1==file2'</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>2つ目の書き方は、if文の記法をtest([])に揃えるためのもの。<code class=\"language-text\">$?</code>で実行ステータスを確認できるため、それを利用している。</p>\n<p>否定条件も使える。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'i!=3'</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>ifと[の間にはスペースが必要。</p>\n<h2 id=\"case文\">case文</h2>\n<p>基本形は以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">case</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-s</span><span class=\"token variable\">`</span></span> <span class=\"token keyword\">in</span>\n  Linux<span class=\"token operator\">|</span>FreeBSD<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'this OS is Linux or FreeBSD'</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  *<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'other OS'</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span></code></pre></div>\n<p>if文で毎回コマンド実行するよりはこっちのほうが簡潔に書けたりする。</p>\n<h2 id=\"for文\">for文</h2>\n<p>基本形は以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> memo.txt prog.txt fig1.png\n<span class=\"token keyword\">do</span> \n  <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"<span class=\"token variable\">$file</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$file</span>\"</span>.bak\n<span class=\"token keyword\">done</span>\n\nmemo.txt.bak\nprog.txt.bak\nfig1.png.bak</code></pre></div>\n<p><code class=\"language-text\">for file in *</code>のようにすると、カレントディレクトリの全てのファイルが引数fileに代入される。\n<code class=\"language-text\">for file in `&lt; filelist`</code>のようにするとファイルから入力を行える。</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\"># filelist\nmemo.txt\nprog.txt\nfig1.png</code></pre></div>\n<p>他の言語と同じように<code class=\"language-text\">continue, break</code>が使える。</p>\n<p>算術式を用いる場合は以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">sum</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\"><span class=\"token punctuation\">((</span>sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">))</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"while文\">while文</h2>\n<p>基本の文は以下の通り。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\">sum</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span> <span class=\"token parameter variable\">-le</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token assign-left variable\">sum</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> <span class=\"token string\">\"<span class=\"token variable\">$sum</span>\"</span> + <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span><span class=\"token variable\">`</span></span>\n  <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span> + <span class=\"token number\">1</span><span class=\"token variable\">`</span></span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>bashの場合は<code class=\"language-text\">`expr \"$i\" + 1`</code>の代わりに<code class=\"language-text\">((i++))</code>が使える。</p>\n<p>無限ループにする場合は</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">:</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"a\"</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>のようにセミコロン(:)を用いる。</p>\n<h2 id=\"select文\">select文</h2>\n<p>選択メニューを表示して、応答を受け付ける事ができる。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PS3</span></span><span class=\"token operator\">=</span><span class=\"token string\">'コマンド?'</span>\n<span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">cmd</span> <span class=\"token keyword\">in</span> up down left right quit\n<span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">case</span> <span class=\"token variable\">$cmd</span> <span class=\"token keyword\">in</span>\n    up<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'up'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    down<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'down'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    left<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'left'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    right<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'right'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    quit<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    *<span class=\"token punctuation\">)</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$REPLAY</span>\"</span><span class=\"token string\">'は選択不可'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">esac</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>selectの要素に連番をつけたメニューとPS3を出力する。\n上のコードの結果は以下のようになる。</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">1) up      2) down    3) left    4) right   5) quit\nコマンド?1\nup\nコマンド?2\ndown\nコマンド?5</code></pre></div>\n<h2 id=\"サブシェルとグループコマンド\">サブシェルとグループコマンド</h2>\n<p>サブシェルでは別のシェルで、グループコマンドは現在のシェルで一連のコマンドを行う。\n使用例は以下。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># サブシェル</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token builtin class-name\">cd</span> /hoge/etc\n  <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-p</span> aaa <span class=\"token punctuation\">..</span>/\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> log\n\n<span class=\"token comment\">#グループコマンド</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">uname</span> <span class=\"token parameter variable\">-a</span>\n  <span class=\"token function\">date</span>\n  <span class=\"token function\">who</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">></span> log</code></pre></div>\n<h2 id=\"関数\">関数</h2>\n<p>基本文は以下。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello World!\"</span>\n<span class=\"token punctuation\">}</span>\n\nfunc</code></pre></div>\n<p>関数内で引数を用いるには、呼び出し時に以下のようにする。[[3][3]]</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span>\n<span class=\"token punctuation\">}</span>\n\nfunc <span class=\"token string\">\"test\"</span></code></pre></div>\n<h2 id=\"配列\">配列</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">array<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'three'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${array<span class=\"token punctuation\">[</span>3<span class=\"token punctuation\">]</span>}</span>\"</span>\n<span class=\"token comment\"># three</span>\n<span class=\"token assign-left variable\">array2</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>one two three<span class=\"token punctuation\">)</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${array2<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>}</span>\"</span>\n<span class=\"token comment\"># one two three</span>\n<span class=\"token builtin class-name\">unset</span> <span class=\"token string\">'array2[1]'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${array2<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>}</span>\"</span>\n<span class=\"token comment\"># one three</span></code></pre></div>\n<p>関数の最初の{の後にはスペースか改行が必要。\n<code class=\"language-text\">func(){ echo Hello;}</code></p>\n<h2 id=\"算術式の評価と条件式の評価\">算術式の評価(())と条件式の評価[[]]</h2>\n<p>bashにて実装された機能。<br>\n算術式の評価では中にC言語Likeな算術を書ける。\n条件式の評価では<code class=\"language-text\">&lt;>,(),&amp;&amp;,||</code>をクォートする必要がない。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token variable\"><span class=\"token punctuation\">((</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span>\n\n<span class=\"token punctuation\">[</span> a <span class=\"token parameter variable\">-a</span> b <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> a <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span> a <span class=\"token parameter variable\">-o</span> b <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> a <span class=\"token operator\">||</span> b <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>testコマンドとの違い[[2][2]]</p>\n<table>\n<thead>\n<tr>\n<th>条件式</th>\n<th>test</th>\n<th>[[]]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AND</td>\n<td>a -a b</td>\n<td>a &#x26;&#x26; b</td>\n</tr>\n<tr>\n<td>OR</td>\n<td>a -o b</td>\n<td>a</td>\n</tr>\n<tr>\n<td>文字列比較</td>\n<td>文字列a == 文字列b</td>\n<td>文字列a == パターンb</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"シェル変数の代入と参照\">シェル変数の代入と参照</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token string\">'hello world'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$a</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${a}</span>\"</span></code></pre></div>\n<p>シングルクォートとダブルクォートの使い分けに気をつける。シングルなら展開無しでそのまま代入される。</p>\n<h2 id=\"位置パラメータ\">位置パラメータ</h2>\n<p>シェルスクリプトのの引数を参照できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./aaa.sh a b c d\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span>\n<span class=\"token comment\"># a</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span>\n<span class=\"token comment\"># ./aaa.sh</span>\n\n<span class=\"token builtin class-name\">set</span> Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${10}</span>\"</span>\n<span class=\"token comment\"># Oct</span></code></pre></div>\n<h2 id=\"特殊パラメータ\">特殊パラメータ</h2>\n<table>\n<thead>\n<tr>\n<th>パラメータ</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$0</td>\n<td>起動されたシェルスクリプト名</td>\n</tr>\n<tr>\n<td>$1~9</td>\n<td>それぞれの引数(arg1~9)</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>引数全てのリスト</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>引数全てを連結して参照する</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>引数の数を表示する($0は含まれない)</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>終了コードを参照する</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>最後にバックグラウンドで実行したプロセスID</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>シェル自身のプロセスID</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>現在のシェルのオプションフラグ</td>\n</tr>\n<tr>\n<td>$_</td>\n<td>直前に実行したコマンドの最後の引数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"パラメータ展開\">パラメータ展開</h2>\n<h3 id=\"パラメータのデフォルト値\">パラメータのデフォルト値</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token function\">file</span> <span class=\"token string\">\"<span class=\"token variable\">${1<span class=\"token operator\">:-</span><span class=\"token operator\">/</span>tmp}</span>\"</span>\n<span class=\"token function\">cp</span> <span class=\"token function\">file</span> <span class=\"token string\">\"<span class=\"token variable\">${1-<span class=\"token operator\">/</span>tmp}</span>\"</span></code></pre></div>\n<p>上の例の場合は引数1が設定されていないか、空文字のときに<code class=\"language-text\">/tmp</code>が展開され、下の場合には設定されてない場合のみ<code class=\"language-text\">/tmp</code>が展開される。\n空文字を無視するかしないかで判断する。</p>\n<h3 id=\"パラメータへデフォルト値を代入\">パラメータへデフォルト値を代入</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token function\">file</span> <span class=\"token string\">\"<span class=\"token variable\">${DIST<span class=\"token operator\">:=</span><span class=\"token operator\">/</span>tmp}</span>\"</span>\n<span class=\"token function\">cp</span> <span class=\"token function\">file</span> <span class=\"token string\">\"<span class=\"token variable\">${DIST=<span class=\"token operator\">/</span>tmp}</span>\"</span></code></pre></div>\n<p>前述のものと違い、代入してから展開する。</p>\n<h3 id=\"パラメータ未設定時にエラーを出力\">パラメータ未設定時にエラーを出力</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token string\">\"<span class=\"token variable\">${1<span class=\"token operator\">:?</span>error<span class=\"token operator\">!</span>}</span>\"</span> ./\n<span class=\"token function\">cp</span> <span class=\"token string\">\"<span class=\"token variable\">${1?error<span class=\"token operator\">!</span>}</span>\"</span> ./</code></pre></div>\n<p>パラメータが設定されていなければ、?の後に記述したメッセージが表示されてスクリプトが終了する。</p>\n<h3 id=\"パラメータの長さ\">パラメータの長さ</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${<span class=\"token operator\">#</span>test}</span></code></pre></div>\n<p>パラメータの文字列の長さを返す。<br>\nスクリプトで使わなくても、コマンド<code class=\"language-text\">cat text | wc -c</code>でも代用できる。</p>\n<h3 id=\"パラメータからパターンを削除\">パラメータからパターンを削除</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${DIR<span class=\"token operator\">#</span>*<span class=\"token operator\">/</span>}</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${DIR<span class=\"token operator\">##</span>*<span class=\"token operator\">/</span>}</span>\"</span></code></pre></div>\n<p><code class=\"language-text\">${パラメータ#パターン}</code>のように使う。#が1つだと最短の部分が、#が2つだと最長の部分が左から取り除かれる。</p>\n<p>#を%に変更すると右側から取り除かれる。</p>\n<h3 id=\"文字列の一部を抜粋\">文字列の一部を抜粋</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token variable\">${パラメータ<span class=\"token operator\">:</span>オフセット<span class=\"token operator\">:</span>長さ}</span></code></pre></div>\n<p>オフセットで戦闘から何文字削除するか、長さで削除した文字列のうち先頭の何文字を表示するか決定する。</p>\n<h3 id=\"パラメータの置換\">パラメータの置換</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token variable\">${パラメータ<span class=\"token operator\">/</span>パターン<span class=\"token operator\">/</span>置換文字列}</span>\n<span class=\"token variable\">${パラメータ<span class=\"token operator\">/</span><span class=\"token operator\">/</span>パターン<span class=\"token operator\">/</span>置換文字列}</span></code></pre></div>\n<p><code class=\"language-text\">/</code>が1つだと先頭の1つを置換する。2つだと全て置換する。</p>\n<h2 id=\"文字列の囲み方\">文字列の囲み方</h2>\n<p>シングルクォート<code class=\"language-text\">' '</code>では文字列がそのまま表示される。ダブルクオート<code class=\"language-text\">\" \"</code>ではパラメータ展開とコマンド置換が行われる。\nバッククォート<code class=\"language-text\">` `</code>では囲んだ部分でのコマンドの標準入力で置換が行われる。<code class=\"language-text\">$( )</code>はバッククォートと同じことを書き方を変えて行える。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token string\">'hello'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'${a}'</span>\n<span class=\"token comment\"># ${a}</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${a}</span>\"</span>\n<span class=\"token comment\"># hello</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">`</span></span>\"</span>\n<span class=\"token comment\"># /home/user</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span>\"</span>\n<span class=\"token comment\"># /home/user</span></code></pre></div>\n<h2 id=\"リダイレクト\">リダイレクト</h2>\n<h3 id=\"入力\">入力</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">file</span></code></pre></div>\n<h3 id=\"出力\">出力</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token string\">'Hello World'</span> <span class=\"token operator\">></span> log</code></pre></div>\n<h3 id=\"追記\">追記</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">date</span> <span class=\"token operator\">>></span> log</code></pre></div>\n<h3 id=\"エラー出力\">エラー出力</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> non-exist <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> /dev/null <span class=\"token comment\"># エラーメッセージを出さずに削除</span></code></pre></div>\n<h3 id=\"ヒアドキュメント\">ヒアドキュメント</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'EOF'\nabcde\nabcde\nEOF</span></code></pre></div>\n<p>終了文字列(上記だとEOF)がシングルクォートされてると変数展開等は行われない。</p>\n<h3 id=\"ヒアストリング\">ヒアストリング</h3>\n<p>基本的にはヒアストリングと一緒。終了文字列を書かなくて良い。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;&lt;</span> <span class=\"token string\">'abcde\nabcde'</span></code></pre></div>\n<h2 id=\"よく使うコマンド\">よく使うコマンド</h2>\n<h3 id=\"expr\">expr</h3>\n<p>数値計算を行う。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">expr</span> <span class=\"token number\">3</span> + <span class=\"token number\">5</span>\n<span class=\"token comment\"># 8</span></code></pre></div>\n<h3 id=\"basename\">basename</h3>\n<p>ファイル名のみを出力する。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">basename</span> /home/user/test.txt\n<span class=\"token comment\"># test.txt</span>\n<span class=\"token function\">basename</span> /home/user/test.txt .txt\n<span class=\"token comment\"># test</span></code></pre></div>\n<h3 id=\"dirname\">dirname</h3>\n<p>ディレクトリ名を表示する。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">dirname</span> /home/user/test.txt\n<span class=\"token comment\"># /home/user</span>\n<span class=\"token function\">dirname</span> test.txt\n<span class=\"token comment\"># .</span></code></pre></div>\n<h3 id=\"wc\">wc</h3>\n<p>ファイルの行数、文字数、サイズを表示できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-lwc</span> test.txt\n<span class=\"token comment\"># row</span>\n<span class=\"token comment\"># words</span>\n<span class=\"token comment\"># size</span></code></pre></div>\n<h3 id=\"sed\">sed</h3>\n<p>ファイルの中の文字列を置き換える。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'aaaaccccaaaa'</span> <span class=\"token operator\">></span> old.txt\n\n<span class=\"token function\">sed</span> <span class=\"token string\">'s/aaaa/b/'</span> old.txt\n<span class=\"token comment\"># bccccaaaa</span>\n<span class=\"token function\">sed</span> <span class=\"token string\">'s/aaaa/b/g'</span> old.txt\n<span class=\"token comment\"># bccccb</span></code></pre></div>\n<h2 id=\"参考\">参考</h2>\n<h3 id=\"文献\">文献</h3>\n<p>[1]: <a href=\"https://qiita.com/nafuka/items/c97bfd2a4ca26e70e722\">https://qiita.com/nafuka/items/c97bfd2a4ca26e70e722</a><br>\n[1]:<a href=\"https://qiita.com/nafuka/items/c97bfd2a4ca26e70e722\">https://qiita.com/nafuka/items/c97bfd2a4ca26e70e722</a>\n[2]: <a href=\"https://qiita.com/kiyodori/items/e9fabcba03fc1e76dbdd\">https://qiita.com/kiyodori/items/e9fabcba03fc1e76dbdd</a>\n[2]: <a href=\"https://qiita.com/kiyodori/items/e9fabcba03fc1e76dbdd\">https://qiita.com/kiyodori/items/e9fabcba03fc1e76dbdd</a>\n[3]: <a href=\"https://qiita.com/kaw/items/034bc4221c4526fe8866\">https://qiita.com/kaw/items/034bc4221c4526fe8866</a>\n[3]: <a href=\"https://qiita.com/kaw/items/034bc4221c4526fe8866\">https://qiita.com/kaw/items/034bc4221c4526fe8866</a></p>\n<h3 id=\"書籍\">書籍</h3>\n<p><a href=\"https://amzn.to/3vkzkgM\">[改訂第3版]シェルスクリプト基本リファレンス ──#!/bin/shで、ここまでできる (WEB+DB PRESS plus)</a></p>","tableOfContents":"<ul>\n<li><a href=\"#shell-script%E3%81%AE1%E8%A1%8C%E7%9B%AE\">Shell Scriptの1行目</a></li>\n<li><a href=\"#if%E6%96%87%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9\">if文の書き方</a></li>\n<li><a href=\"#%E3%83%91%E3%82%A4%E3%83%97---%E3%83%AA%E3%82%B9%E3%83%88--\">パイプ( | ), リスト( ; )</a></li>\n<li><a href=\"#-%E3%81%A8-\">&#x26;&#x26; と ||</a></li>\n<li><a href=\"#if%E6%96%87\">if文</a></li>\n<li><a href=\"#case%E6%96%87\">case文</a></li>\n<li><a href=\"#for%E6%96%87\">for文</a></li>\n<li><a href=\"#while%E6%96%87\">while文</a></li>\n<li><a href=\"#select%E6%96%87\">select文</a></li>\n<li><a href=\"#%E3%82%B5%E3%83%96%E3%82%B7%E3%82%A7%E3%83%AB%E3%81%A8%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\">サブシェルとグループコマンド</a></li>\n<li><a href=\"#%E9%96%A2%E6%95%B0\">関数</a></li>\n<li><a href=\"#%E9%85%8D%E5%88%97\">配列</a></li>\n<li><a href=\"#%E7%AE%97%E8%A1%93%E5%BC%8F%E3%81%AE%E8%A9%95%E4%BE%A1%E3%81%A8%E6%9D%A1%E4%BB%B6%E5%BC%8F%E3%81%AE%E8%A9%95%E4%BE%A1\">算術式の評価(())と条件式の評価[[]]</a></li>\n<li><a href=\"#%E3%82%B7%E3%82%A7%E3%83%AB%E5%A4%89%E6%95%B0%E3%81%AE%E4%BB%A3%E5%85%A5%E3%81%A8%E5%8F%82%E7%85%A7\">シェル変数の代入と参照</a></li>\n<li><a href=\"#%E4%BD%8D%E7%BD%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF\">位置パラメータ</a></li>\n<li><a href=\"#%E7%89%B9%E6%AE%8A%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF\">特殊パラメータ</a></li>\n<li><a href=\"#%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E5%B1%95%E9%96%8B\">パラメータ展開</a></li>\n<li><a href=\"#%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%9B%B2%E3%81%BF%E6%96%B9\">文字列の囲み方</a></li>\n<li><a href=\"#%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88\">リダイレクト</a></li>\n<li><a href=\"#%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\">よく使うコマンド</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>","excerpt":"本稿ではshellscriptについて基本的なことを書く。 Shell Scriptの1行目 この一行目はシバン(shebang) [[1][1]] という。で指定する。 if文の書き方 then, fi…","frontmatter":{"title":"Shell Script","date":"2021.05.24","update":"2021.05.24","category":"shellscript","tags":["shellscript"]},"fields":{"slug":"/posts/2021-05-24-shell-script/"}}},"pageContext":{"id":"e7f7374b-c7da-5108-96c1-d30689113de5"}},"staticQueryHashes":["1123391092"],"slicesMap":{}}