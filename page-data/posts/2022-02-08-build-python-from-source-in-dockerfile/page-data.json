{"componentChunkName":"component---src-templates-post-js","path":"/posts/2022-02-08-build-python-from-source-in-dockerfile/","result":{"data":{"site":{"siteMetadata":{"title":"MJUN Tech Note","author":"Junya Morioka"}},"markdownRemark":{"id":"5e43cad3-99f7-5c3a-9c2d-832cbc75da9e","html":"<p>コンテナ内で自由にバージョンを指定して Python を使いたいときがある．<br>\n方法としては以下が考えられる．</p>\n<ol>\n<li>apt などでインストールする</li>\n<li>pyenv を使う</li>\n<li>python-build を使う(<a href=\"https://qiita.com/shngt/items/51102aeb81834d0d3d7a\">参考</a>)</li>\n<li>ソースからビルドする</li>\n</ol>\n<p>1 の apt だと，3.7 や 3.9 などの 2 桁目までは指定できるが，\n3.9.1 や 3.9.2 までは指定できない．(セキュリティ的にはこっちが良いが)．\nそもそも Image によっては欲しいバージョンがない場合もある．</p>\n<p>次に 2,3 の pyenv や python-build を使用する方法だが，\npyenv をクローンしてこなければならないので，回りくどい．<br>\nあと，ホストマシンで pyenv local しているディレクトリをマウントして，\nコンテナ内でそのディレクトリに入ると，存在しないバージョンを参照されてしまうので，\n何かとやりづらい．</p>\n<p>やっぱりソースからビルドするのが一番素直で楽なのかもしれない．</p>\n<p>というわけで，Dockerfile 例は以下．</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> nvidia/cuda:11.2-cudnn8-devel-ubuntu20.04</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> PYTHON=<span class=\"token string\">\"3.9.10\"</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update <span class=\"token operator\">\\</span>\n    &amp;&amp; apt-get install -y --no-install-recommends <span class=\"token operator\">\\</span>\n    <span class=\"token comment\"># Python build dependencies</span>\n    make <span class=\"token operator\">\\</span>\n    build-essential <span class=\"token operator\">\\</span>\n    libssl-dev <span class=\"token operator\">\\</span>\n    zlib1g-dev <span class=\"token operator\">\\</span>\n    libbz2-dev <span class=\"token operator\">\\</span>\n    libreadline-dev <span class=\"token operator\">\\</span>\n    libsqlite3-dev <span class=\"token operator\">\\</span>\n    wget <span class=\"token operator\">\\</span>\n    curl <span class=\"token operator\">\\</span>\n    llvm <span class=\"token operator\">\\</span>\n    libncursesw5-dev <span class=\"token operator\">\\</span>\n    xz-utils <span class=\"token operator\">\\</span>\n    tk-dev <span class=\"token operator\">\\</span>\n    libxml2-dev <span class=\"token operator\">\\</span>\n    libxmlsec1-dev <span class=\"token operator\">\\</span>\n    libffi-dev <span class=\"token operator\">\\</span>\n    liblzma-dev</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> wget -q <span class=\"token string\">\"https://www.python.org/ftp/python/${PYTHON}/Python-${PYTHON}.tar.xz\"</span> &amp;&amp;<span class=\"token operator\">\\</span>\n    tar xvf Python-<span class=\"token variable\">${PYTHON}</span>.tar.xz &amp;&amp; <span class=\"token operator\">\\</span>\n    cd Python-<span class=\"token variable\">${PYTHON}</span> &amp;&amp;<span class=\"token operator\">\\</span>\n    ./configure --enable-optimizations --without-ensurepip --enable-loadable-sqlite-extensions &amp;&amp; <span class=\"token operator\">\\</span>\n    make -j 8 &amp;&amp;<span class=\"token operator\">\\</span>\n    make install &amp;&amp; <span class=\"token operator\">\\</span>\n    cd ../ &amp;&amp; rm -rf Python-<span class=\"token variable\">${PYTHON}</span> &amp;&amp; <span class=\"token operator\">\\</span>\n    python3 -V &amp;&amp; <span class=\"token operator\">\\</span>\n    ln -s /usr/local/bin/python3 /usr/local/bin/python</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> curl -kL https://bootstrap.pypa.io/get-pip.py | python &amp;&amp; <span class=\"token operator\">\\</span>\n    pip --version &amp;&amp;<span class=\"token operator\">\\</span>\n    rm -rf get-pip.py</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> echo <span class=\"token string\">'export PATH=~/.local/bin:$PATH'</span> >> ~/.bashrc</span></code></pre></div>\n<p>python3 に python のエイリアスを貼っているので，python コマンドでそのまま任意の Python を使用できる．</p>","tableOfContents":"","excerpt":"コンテナ内で自由にバージョンを指定して Python を使いたいときがある． 方法としては以下が考えられる． apt などでインストールする pyenv を使う python-build を使う(参考) ソースからビルドする 1 の apt だと，3.7 や 3.9 などの…","frontmatter":{"title":"Dockerfile内で任意のバージョンのPythonをソースからビルドする","date":"2022.02.08","update":"2022.02.08","category":"Docker","tags":["docker"]},"fields":{"slug":"/posts/2022-02-08-build-python-from-source-in-dockerfile/"}}},"pageContext":{"id":"5e43cad3-99f7-5c3a-9c2d-832cbc75da9e"}},"staticQueryHashes":["1123391092"],"slicesMap":{}}